<?php

declare(strict_types=1);

namespace App;

class Code39
{
    private $codes = [
        "0" => "1010011011010",
        "1" => "1101001010110",
        "2" => "1011001010110",
        "3" => "1101100101010",
        "4" => "1010011010110",
        "5" => "1101001101010",
        "6" => "1011001101010",
        "7" => "1010010110110",
        "8" => "1101001011010",
        "9" => "1011001011010",
        "A" => "1101010010110",
        "B" => "1011010010110",
        "C" => "1101101001010",
        "D" => "1010110010110",
        "E" => "1101011001010",
        "F" => "1011011001010",
        "G" => "1010100110110",
        "H" => "1101010011010",
        "I" => "1011010011010",
        "J" => "1010110011010",
        "K" => "1101010100110",
        "L" => "1011010100110",
        "M" => "1101101010010",
        "N" => "1010110100110",
        "O" => "1101011010010",
        "P" => "1011011010010",
        "Q" => "1010101100110",
        "R" => "1101010110010",
        "S" => "1011010110010",
        "T" => "1010110110010",
        "U" => "1100101010110",
        "V" => "1001101010110",
        "W" => "1100110101010",
        "X" => "1001011010110",
        "Y" => "1100101101010",
        "Z" => "1001101101010",
        "$" => "1001001001010",
        "/" => "1001001010010",
        "+" => "1001010010010",
        "%" => "1010010010010",
        "*" => "1001011011010"
    ];

    public function getCode(string $char) : ?string
    {
        return $this->codes[$char] ?? null;
    }

    public function encode(string $chars) : string
    {

        $arr = str_split($chars);
        
        $barCode = implode("", array_map(fn($el) => $this->getCode(strtoupper($el)), $arr));

        $barCode = $this->getCode("*") . $barCode . $this->getCode("*");

        return $barCode;

    }

}